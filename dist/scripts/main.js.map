{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","map","markers","document","addEventListener","event","fillSearchingCriteria","DBHelper","fetchSearchValues","error","console","self","fillCuisinesHTML","fillNeighborhoodsHTML","select","getElementById","forEach","option","createElement","innerHTML","neighborhood","value","append","cuisine","window","initMap","loc","lat","lng","google","maps","Map","zoom","center","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","ul","m","setMap","createRestaurantHTML","restaurant","addMarkersToMap","configureIntersectionObserver","li","imgsList","imagesUrlForRestaurant","picture","className","display","img1","media","srcset","img2","img","alt","name","cuisine_type","address","setAttribute","more","role","href","urlForRestaurant","marker","mapMarkerForRestaurant","addListener","location","url","push","images","imageCount","observer","querySelectorAll","config","rootMargin","threshold","length","loadImagesImmediately","IntersectionObserver","onIntersection","i","image","classList","contains","observe","fetchImage","Promise","resolve","reject","Image","src","onload","onerror","preloadImage","dataset","then","applyImage","children","disconnect","entries","entry","intersectionRatio","unobserve","target","add"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar map\r\nvar markers = []\r\n\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  // fetchNeighborhoods();\r\n  // fetchCuisines();\r\n\r\n  fillSearchingCriteria();\r\n});\r\n\r\n\r\nvar fillSearchingCriteria = ()=>{\r\n  DBHelper.fetchSearchValues((error, neighborhoods, cuisines) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\n// var fetchNeighborhoods = () => {\r\n//   DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n//     if (error) { // Got an error\r\n//       console.error(error);\r\n//     } else {\r\n//       self.neighborhoods = neighborhoods;\r\n//       fillNeighborhoodsHTML();\r\n//     }\r\n//   });\r\n// }\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nvar fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\n// var fetchCuisines = () => {\r\n//   DBHelper.fetchCuisines((error, cuisines) => {\r\n//     if (error) { // Got an error!\r\n//       console.error(error);\r\n//     } else {\r\n//       self.cuisines = cuisines;\r\n//       fillCuisinesHTML();\r\n//     }\r\n//   });\r\n// }\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nvar fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nvar updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nvar resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nvar fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n  configureIntersectionObserver();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nvar createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('div');\r\n\r\n  // TODO chage it to picture\r\n//  const image = document.createElement('img');\r\n//  image.className = 'restaurant-img';\r\n//  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n//  li.append(image);\r\n\t\r\n\tlet imgsList = DBHelper.imagesUrlForRestaurant(restaurant);\r\n\tconst picture = document.createElement('picture');\r\n\tpicture.className = 'js-lazy-image';\r\n  picture.display = 'none';\r\n\tconst img1 = document.createElement('source');\r\n\timg1.media = '(min-width: 1500px)';\r\n\timg1.className = 'restaurant-img';\r\n\timg1.srcset = imgsList[1];\r\n\r\n\tpicture.append(img1);\r\n\tconst img2 = document.createElement('source');\r\n\timg2.media = '(min-width: 800px)';\r\n\timg2.className = 'restaurant-img';\r\n\timg2.srcset = imgsList[2];\r\n\tpicture.append(img2);\r\n\tconst img = document.createElement('img');\r\n\timg.alt = restaurant.name + ' restaurant , provide ' + restaurant.cuisine_type + ', Located in ' + restaurant.address;\r\n\t// img.src = imgsList[3];\r\n  img.setAttribute('data-src', imgsList[3]);\r\n\timg.className = 'restaurant-img';\r\n\tpicture.append(img);\r\n\tli.append(picture);\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.role = 'button';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nvar addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n}\r\n\r\n\r\n\r\n/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ \r\n  * intersection observer section \r\n*/\r\n\r\nlet images, imageCount, observer;\r\nvar configureIntersectionObserver = ()=>{\r\n  // Get all of the images that are marked up to lazy load\r\n  images = document.querySelectorAll('.js-lazy-image');\r\n  const config = {\r\n    // If the image gets within 50px in the Y axis, start the download.\r\n    rootMargin: '50px 0px',\r\n    threshold: 0.01\r\n  };\r\n  imageCount = images.length;\r\n  // If we don't have support for intersection observer, loads the images immediately\r\n  if (!('IntersectionObserver' in window)) {\r\n    loadImagesImmediately(images);\r\n  } else {\r\n    // It is supported, load the images\r\n    observer = new IntersectionObserver(onIntersection, config);\r\n\r\n    // foreach() is not supported in IE\r\n    for (let i = 0; i < images.length; i++) { \r\n      let image = images[i];\r\n      if (image.classList.contains('js-lazy-image--handled')) {\r\n        continue;\r\n      }\r\n\r\n      observer.observe(image);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Fetchs the image for the given URL\r\n * @param {string} url \r\n */\r\nfunction fetchImage(url) {\r\n  return new Promise((resolve, reject) => {\r\n    const image = new Image();\r\n    image.src = url;\r\n    image.onload = resolve;\r\n    image.onerror = reject;\r\n  });\r\n}\r\n\r\n/**\r\n * Preloads the image\r\n * @param {object} image \r\n */\r\nfunction preloadImage(image) {\r\n  const src = image.dataset.src;\r\n  if (!src) {\r\n    return;\r\n  }\r\n\r\n  return fetchImage(src).then(() => { applyImage(image, src); });\r\n}\r\n\r\n/**\r\n * Load all of the images immediately\r\n * @param {NodeListOf<Element>} images \r\n */\r\nfunction loadImagesImmediately(images) {\r\n  // foreach() is not supported in IE\r\n  for (let i = 0; i < images.length; i++) { \r\n    let image = images[i];\r\n    preloadImage(image.children[2]);\r\n  }\r\n}\r\n\r\n/**\r\n * Disconnect the observer\r\n */\r\nfunction disconnect() {\r\n  if (!observer) {\r\n    return;\r\n  }\r\n\r\n  observer.disconnect();\r\n}\r\n\r\n/**\r\n * On intersection\r\n * @param {array} entries \r\n */\r\nfunction onIntersection(entries) {\r\n  // Disconnect if we've already loaded all of the images\r\n  if (imageCount === 0) {\r\n    observer.disconnect();\r\n  }\r\n\r\n  // Loop through the entries\r\n  for (let i = 0; i < entries.length; i++) { \r\n    let entry = entries[i];\r\n    // Are we in viewport?\r\n    if (entry.intersectionRatio > 0) {\r\n      imageCount--;\r\n\r\n      // Stop watching and load the image\r\n      observer.unobserve(entry.target);\r\n      preloadImage(entry.target.children[2]);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Apply the image\r\n * @param {object} img \r\n * @param {string} src \r\n */\r\nfunction applyImage(img, src) {\r\n  // Prevent this from being lazy loaded a second time.\r\n  img.classList.add('js-lazy-image--handled');\r\n  img.src = src;\r\n  // img.classList.add('fade-in');\r\n}\r\n\r\n\r\n\r\n\r\n"]}