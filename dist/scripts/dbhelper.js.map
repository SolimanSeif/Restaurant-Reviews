{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","callback","res","allResturnats","fetch","DATABASE_URL","then","response","json","addAllResturants","resJson","id","resturantByID","obj","restaurant","undefined","error","addResturant","cuisine","fetchRestaurants","restaurants","results","filter","r","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","name","photograph","endsWith","getImageName","imgsList","push","marker","google","maps","Marker","position","latlng","title","url","urlForRestaurant","animation","Animation","DROP","idb","port"],"mappings":"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","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\n\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n\r\n   static get idb_object(){\r\n      return new idb('mws-restaurant-stage-1', 'Restaurants', 1);\r\n   }\r\n\r\n\r\n  static get DATABASE_URL() {\r\n    const port = 8000 // Change this to your server port\r\n    // return `http://localhost:${port}/data/restaurants.json`;\r\n    return 'http://localhost:1337/restaurants';\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    // let xhr = new XMLHttpRequest();\r\n    // xhr.open('GET', DBHelper.DATABASE_URL);\r\n    // xhr.onload = () => {\r\n    //   if (xhr.status === 200) { // Got a success response from server!\r\n    //     const json = JSON.parse(xhr.responseText);\r\n    //     const restaurants = json.restaurants;\r\n    //     callback(null, restaurants);\r\n    //   } else { // Oops!. Got an error from server.\r\n    //     const error = (`Request failed. Returned status of ${xhr.status}`);\r\n    //     callback(error, null);\r\n    //   }\r\n    // };\r\n    // xhr.send();\r\n\r\n    let res = allResturnats();\r\n    if(res){\r\n      callback(null,res);\r\n    }else{\r\n      fetch(DBHelper.DATABASE_URL).then(response =>{\r\n        return response.json();\r\n      }).then(resJson => {\r\n        addAllResturants(resJson);\r\n        callback(null, resJson);\r\n      });\r\n    }\r\n    \r\n\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n\r\n    let res = resturantByID(id);\r\n    if(res){\r\n      callback(null, res);\r\n    }else{\r\n      fetch(`http://localhost:1337/restaurants/${id}`).then(obj => {\r\n        return obj.json();\r\n      }).then(restaurant =>{\r\n        if(restaurant === undefined){\r\n          callback(error, null);\r\n        }else{\r\n          addResturant(id, restaurant);\r\n          callback(null, restaurant);\r\n        }\r\n      });\r\n    }\r\n    \r\n\r\n\r\n    // DBHelper.fetchRestaurants((error, restaurants) => {\r\n    //   if (error) {\r\n    //     callback(error, null);\r\n    //   } else {\r\n    //     const restaurant = restaurants.find(r => r.id == id);\r\n    //     if (restaurant) { // Got the restaurant\r\n    //       callback(null, restaurant);\r\n    //     } else { // Restaurant does not exist in the database\r\n    //       callback('Restaurant does not exist', null);\r\n    //     }\r\n    //   }\r\n    // });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  static fetchSearchValues(callback){\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        \r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\r\n\r\n        callback(null, uniqueNeighborhoods, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  // static fetchNeighborhoods(callback) {\r\n  //   // Fetch all restaurants\r\n  //   DBHelper.fetchRestaurants((error, restaurants) => {\r\n  //     if (error) {\r\n  //       callback(error, null);\r\n  //     } else {\r\n  //       // Get all neighborhoods from all restaurants\r\n  //       const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n  //       // Remove duplicates from neighborhoods\r\n  //       const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n  //       callback(null, uniqueNeighborhoods);\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  // static fetchCuisines(callback) {\r\n  //   // Fetch all restaurants\r\n  //   DBHelper.fetchRestaurants((error, restaurants) => {\r\n  //     if (error) {\r\n  //       callback(error, null);\r\n  //     } else {\r\n  //       // Get all cuisines from all restaurants\r\n  //       const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n  //       // Remove duplicates from cuisines\r\n  //       const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n  //       callback(null, uniqueCuisines);\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n\r\n  static getImageName(restaurant){\r\n    let name = restaurant.photograph;\r\n    if(name && !(name.endsWith('.jpg') || name.endsWith('JPG')) ){\r\n      name = name + '.jpg';\r\n    }\r\n\r\n    return name;\r\n  }\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    let name = DBHelper.getImageName(restaurant);\r\n    return (`/images/${name}`);\r\n  }\r\n  \r\n\tstatic imagesUrlForRestaurant(restaurant) {\r\n    let name = DBHelper.getImageName(restaurant);\r\n\t\tvar imgsList = [];\r\n    if(name){\r\n      imgsList.push(`/images/1600/${name}`);\r\n      imgsList.push(`/images/800x600/${name}`);\r\n      imgsList.push(`/images/${name}`);\r\n      imgsList.push(`/images/270x203/${name}`);  \r\n    }else{\r\n      imgsList.push('/images/SplashScreen/splashScreen-256x256.png');\r\n      imgsList.push('/images/SplashScreen/splashScreen-256x256.png');\r\n      imgsList.push('/images/SplashScreen/splashScreen-256x256.png');\r\n      imgsList.push('/images/SplashScreen/splashScreen-256x256.png');\r\n    }\r\n\t\t\r\n\t\treturn imgsList;\r\n\t}\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n"]}