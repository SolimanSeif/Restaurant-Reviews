{"version":3,"sources":["restaurant_info.js"],"names":["restaurant","map","window","initMap","fetchRestaurantFromURL","error","console","self","google","maps","Map","document","getElementById","zoom","center","latlng","scrollwheel","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","id","getParameterByName","fetchRestaurantById","fillRestaurantHTML","name","innerHTML","address","picture","className","imgsList","imagesUrlForRestaurant","img1","createElement","media","srcset","appendChild","img2","img","alt","cuisine_type","src","cuisine","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","day","time","reviews","container","title","noReviews","ul","forEach","createReviewHTML","review","li","date","head","rating","getRatingClassName","comments","rate","rateName","breadcrumb","url","location","href","replace","regex","RegExp","results","exec","decodeURIComponent"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\r\nvar map;\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 16,\r\n        center: restaurant.latlng,\r\n        scrollwheel: false\r\n      });\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nvar fetchRestaurantFromURL = (callback) => {\r\n  if (self.restaurant) { // restaurant already fetched!\r\n    callback(null, self.restaurant)\r\n    return;\r\n  }\r\n  const id = getParameterByName('id');\r\n  if (!id) { // no id found in URL\r\n    error = 'No restaurant id in URL'\r\n    callback(error, null);\r\n  } else {\r\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n      self.restaurant = restaurant;\r\n      if (!restaurant) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      fillRestaurantHTML();\r\n      callback(null, restaurant)\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nvar fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n  const name = document.getElementById('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n\r\n  const address = document.getElementById('restaurant-address');\r\n  address.innerHTML = restaurant.address;\r\n\r\n  // TODO picture from HTML and change the requirement from here.\r\n  const picture = document.getElementById('restaurant-img');\r\n  picture.className = 'restaurant-img';\r\n//  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  \r\n  \r\n\tlet imgsList = DBHelper.imagesUrlForRestaurant(restaurant);\r\n\tconst img1 = document.createElement('source');\r\n\timg1.media = '(min-width: 1500px)';\r\n\timg1.srcset = imgsList[0];\r\n\timg1.className = 'restaurant-img';\r\n\tpicture.appendChild(img1);\r\n\tconst img2 = document.createElement('source');\r\n\timg2.media = '(min-width: 800px)';\r\n\timg2.srcset = imgsList[1];\r\n\timg2.className = 'restaurant-img';\r\n\tpicture.appendChild(img2);\r\n\tconst img = document.createElement('img');\r\n\timg.alt = restaurant.name + ' restaurant , provide ' + restaurant.cuisine_type + ', Located in ' + restaurant.address;\r\n\timg.src = imgsList[2];\r\n\timg.className = 'restaurant-img';\r\n\tpicture.appendChild(img);\r\n  \r\n  \r\n  const cuisine = document.getElementById('restaurant-cuisine');\r\n  cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n  // fill operating hours\r\n  if (restaurant.operating_hours) {\r\n    fillRestaurantHoursHTML();\r\n  }\r\n  // fill reviews\r\n  fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nvar fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    time.innerHTML = operatingHours[key];\r\n    row.appendChild(time);\r\n\r\n    hours.appendChild(row);\r\n  }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nvar fillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n  const container = document.getElementById('reviews-container');\r\n  const title = document.createElement('h3');\r\n  title.innerHTML = 'Reviews';\r\n  container.appendChild(title);\r\n\r\n  if (!reviews) {\r\n    const noReviews = document.createElement('p');\r\n    noReviews.innerHTML = 'No reviews yet!';\r\n    container.appendChild(noReviews);\r\n    return;\r\n  }\r\n  const ul = document.getElementById('reviews-list');\r\n  reviews.forEach(review => {\r\n    ul.appendChild(createReviewHTML(review));\r\n  });\r\n  container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\nvar createReviewHTML = (review) => {\r\n  const li = document.createElement('div');\r\n  \r\n  const name = document.createElement('p1');\r\n  name.innerHTML = review.name;\r\n//  li.appendChild(name);\r\n\r\n  const date = document.createElement('p2');\r\n  date.innerHTML = review.date;\r\n//  li.appendChild(date);\r\n\r\n  const head = document.createElement('h4');\r\n  head.appendChild(name);\r\n  head.appendChild(date);\r\n  head.className = 'reviewHead';\r\n  li.appendChild(head);\r\n  \r\n  const rating = document.createElement('p3');\r\n  rating.innerHTML = `Rating: ${review.rating}`; \r\n\trating.className = 'reviewRate ' + getRatingClassName(review.rating);\r\n  li.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n  comments.innerHTML = review.comments;\r\n  li.appendChild(comments);\r\n\r\n  return li;\r\n}\r\n\r\nvar getRatingClassName = (rate) =>{\r\n\tlet rateName = 'unknownRate';\r\n\tif(rate == 0){\r\n\t\trateName = 'rate0';\r\n\t}else if(rate == 1){\r\n\t\trateName = 'rate1';\r\n\t}else if(rate == 2){\r\n\t\trateName = 'rate2';\r\n\t}else if(rate == 3){\r\n\t\trateName = 'rate3';\r\n\t}else if(rate == 4){\r\n\t\trateName = 'rate4';\r\n\t}else if(rate == 5){\r\n\t\trateName = 'rate5';\r\n\t}\r\n\treturn rateName;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nvar fillBreadcrumb = (restaurant=self.restaurant) => {\r\n  const breadcrumb = document.getElementById('breadcrumbOL');\r\n  const li = document.createElement('li');\r\n  li.innerHTML = restaurant.name;\r\n  breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nvar getParameterByName = (name, url) => {\r\n  if (!url)\r\n    url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n  if (!results)\r\n    return null;\r\n  if (!results[2])\r\n    return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n"]}